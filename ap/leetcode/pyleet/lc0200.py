# 17:55
# 18:45

from collections import deque


class Solution:
    def numIslands(self, grid):
        self.grid = grid
        self.visited = [[False for __ in row] for row in self.grid]

        res = 0

        for i in range(len(self.grid)):
            for j in range(len(self.grid[i])):
                if not self.isSoil(i, j) or self.visited[i][j]:
                    continue
                self.walkIsland(i, j)
                res += 1

        return res

    def walkIsland(self, i, j):
        queue = deque()
        queue.append((i, j))

        while queue:
            curr = queue.pop()
            self.markVisited(*curr)

            for cell in self.getNeighbours(*curr):
                if self.isSoil(*cell):
                    queue.append(cell)


    def markVisited(self, i, j):
        self.visited[i][j] = True

    def isSoil(self, i, j):
        return self.grid[i][j] == "1"

    def getNeighbours(self, i, j):
        res = []

        north = (i - 1, j)
        east = (i, j + 1)
        south = (i + 1, j)
        west = (i, j - 1)

        if i != 0 and not self.visited[i-1][j]:
            res.append(north)
        if j + 1 < len(self.grid[i]) and not self.visited[i][j+1]:
            res.append(east)
        if i + 1 < len(self.grid) and not self.visited[i+1][j]:
            res.append(south)
        if j != 0 and not self.visited[i][j-1]:
            res.append(west)

        return res


if __name__ == "__main__":
    assert Solution().numIslands([
        ["1","1","1","1","0"],
        ["1","1","0","1","0"],
        ["1","1","0","0","0"],
        ["0","0","0","0","0"]
    ]) == 1

    assert Solution().numIslands([["0"]]) == 0
    assert Solution().numIslands([["1"]]) == 1

    assert Solution().numIslands([
        ["0", "0", "0"],
        ["0", "0", "0"],
    ]) == 0

    assert Solution().numIslands([
        ["0", "0", "0"],
        ["0", "1", "0"],
    ]) == 1

    assert Solution().numIslands([
        ["0", "1", "0"],
        ["0", "1", "0"],
    ]) == 1

    assert Solution().numIslands([
        ["1", "1", "0"],
        ["1", "0", "1"],
    ]) == 2

    assert Solution().numIslands([
        ["1", "0", "1"],
        ["0", "1", "1"],
    ]) == 2

    assert Solution().numIslands([
        ["1", "1", "1"],
        ["1", "1", "1"],
        ["1", "1", "1"],
    ]) == 1

    assert Solution().numIslands([
        ["1", "1", "1"],
        ["1", "0", "1"],
        ["1", "1", "1"],
    ]) == 1

    assert Solution().numIslands([
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
        ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
    ]) == 1

    print("All tests passed.")

